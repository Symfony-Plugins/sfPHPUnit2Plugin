<?php  abstract class sfPHPUnitBaseFunctionalTestCase extends sfPHPUnitBaseTestCase { private $testBrowser; protected function isDebug() { return true; } protected function setUp() { $app = $this->getApplication(); if (!sfContext::hasInstance($app)) { $configuration = ProjectConfiguration::getApplicationConfiguration($app, $this->getEnvironment(), $this->isDebug()); sfContext::createInstance($configuration, $app); require_once $configuration->getSymfonyLibDir().'/vendor/lime/lime.php'; } if($app != sfContext::getInstance()->getConfiguration()->getApplication()) { sfContext::switchTo($app); } $this->testBrowser = new sfTestFunctional(new sfBrowser(), $this->getTest()); $this->_start(); } protected function tearDown() { $this->_end(); } public function getBrowser() { return $this->testBrowser; } protected function getContext() { if(!$this->context) { $this->context = sfContext::getInstance(); } return $this->context; } } abstract class sfPHPUnitBaseTestCase extends PHPUnit_Framework_TestCase { private $test = null; private $context = null; private $applicationConfiguration = null; protected function _start() { } protected function _end() { } protected function setUp() { $this->_start(); } protected function tearDown() { $this->_end(); } protected function getApplicationConfiguration() { if (is_null($this->applicationConfiguration)) { $this->applicationConfiguration = ProjectConfiguration::getApplicationConfiguration($this->getApplication(), $this->getEnvironment(), true); } return $this->applicationConfiguration; } protected function getContext() { if (!$this->context) { $this->context = sfContext::createInstance($this->getApplicationConfiguration()); } return $this->context; } protected function getTest() { if (!$this->test) { $this->test = new sfPHPUnitTest( $this ); } return $this->test; } protected function debug($mixed, $message = 'debug') { $this->getTest()->diag(sprintf('[%s] %s', $message, var_export($mixed, true))); } protected function getApplication() { throw new Exception( 'Application name is not defined. Overwrite "getApplication" in your unit test!'); } protected function getEnvironment() { return 'test'; } } class sfPHPUnitTest extends lime_test { private $testCase = null; public function __construct(PHPUnit_Framework_TestCase $testCase) { $this->testCase = $testCase; parent::__construct(null, null); } public function __destruct() { } public function __call($name, $arguments) { echo "sfPHPUnitTest::__call:{$name}:" . var_export($arguments, true) . ";\n"; } public function ok($exp, $message = '') { $result = (bool) $exp; $this->testCase->assertTrue($result, $message); return $result; } public function is($exp1, $exp2, $message = '') { $this->testCase->assertEquals($exp2, $exp1, $message); } public function isnt($exp1, $exp2, $message = '') { $this->testCase->assertNotEquals($exp2, $exp1, $message); } public function like($exp, $regex, $message = '') { return $this->ok(preg_match($regex, $exp), $message); } public function unlike($exp, $regex, $message = '') { return $this->ok(!preg_match($regex, $exp), $message); } public function cmp_ok($exp1, $op, $exp2, $message = '') { eval(sprintf("\$result = \$exp1 $op \$exp2;")); return $this->ok($result, $message); } public function can_ok($object, $methods, $message = '') { $result = true; $failedMessages = array(); foreach ((array) $methods as $method) { if (!method_exists($object, $method)) { $result = false; $failedMessages[] = sprintf("      method '%s' does not exist", $method); } } if (!$result) { $this->error(implode(', ', $failedMessages)); } return $this->ok($result, $message); } public function isa_ok($var, $class, $message = '') { $some = $this->testCase->assertType($class, $var, $message); } public function is_deeply($exp1, $exp2, $message = '') { $this->error('"is_deeply" is currently not supported'); } public function pass($message = '') { $this->testCase->assertTrue(true, $message); } public function fail($message = '') { $this->testCase->fail( $message ); } public function skip($message = '', $nb_tests = 1) { $this->testCase->markTestSkipped($message . ($message ? ', ' : '') . 'nb_tests: ' . $nb_tests); } public function include_ok($file, $message = '') { return $this->ok((@include($file)) == 1, $message); } public function comment($msg) { $this->diag('COMMENT: ' . $msg); } public function info($msg) { $this->diag('INFO: ' . $msg); } public function error($msg, $file = null, $line = null, array $traces = array()) { $this->diag('ERROR: ' . $msg); } public function diag($msg) { if ($msg) { echo "\n# $msg"; } } } 